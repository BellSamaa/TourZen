// src/pages/AddHotelsFromData.jsx
import React, { useState, useEffect } from 'react';
import { getSupabase } from '../lib/supabaseClient';
// üëá 1. Import d·ªØ li·ªáu KH√ÅCH S·∫†N (ƒë·∫£m b·∫£o t√™n file v√† bi·∫øn ƒë√∫ng) üëá
import { HOTELS_DATA } from '../data/hotels'; // Ho·∫∑c file ch·ª©a HOTELS_DATA
import { FaPlus, FaCheckCircle, FaSpinner, FaExclamationCircle } from 'react-icons/fa';

const supabase = getSupabase();

export default function AddHotelsFromData() {
  // üëá 2. S·ª≠ d·ª•ng HOTELS_DATA üëá
  const [localHotels, setLocalHotels] = useState(HOTELS_DATA);
  const [suppliers, setSuppliers] = useState([]);
  const [addingStatus, setAddingStatus] = useState({});
  const [loadingSuppliers, setLoadingSuppliers] = useState(true);
  const [dbHotelCodes, setDbHotelCodes] = useState(new Set()); // L∆∞u m√£ kh√°ch s·∫°n ƒë√£ c√≥

  useEffect(() => {
    async function fetchData() {
      setLoadingSuppliers(true);
      const [supplierRes, productRes] = await Promise.all([
        supabase.from('Suppliers').select('id, name'),
        // üëá 3. L·∫•y m√£ c·ªßa KH√ÅCH S·∫†N ƒë√£ c√≥ t·ª´ b·∫£ng Products üëá
        supabase.from('Products').select('tour_code').eq('product_type', 'hotel')
      ]);

      if (supplierRes.data) {
        setSuppliers(supplierRes.data);
      } else {
        console.error('L·ªói fetch suppliers:', supplierRes.error);
      }

      if (productRes.data) {
        setDbHotelCodes(new Set(productRes.data.map(p => p.tour_code)));
      } else {
         console.error('L·ªói fetch existing hotel codes:', productRes.error);
      }
      setLoadingSuppliers(false);
    }
    fetchData();
  }, []);

  // 4. ƒê·ªïi t√™n h√†m th√†nh handleAddHotel
  const handleAddHotel = async (hotelToAdd) => {
    // üëá 5. D√πng id kh√°ch s·∫°n l√†m m√£ (tour_code) üëá
    const hotelCode = String(hotelToAdd.id); // ƒê·∫£m b·∫£o l√† string

    if (dbHotelCodes.has(hotelCode)) {
       setAddingStatus((prev) => ({ ...prev, [hotelCode]: 'exists' }));
       return;
    }

    setAddingStatus((prev) => ({ ...prev, [hotelCode]: 'adding' }));

    // Logic ch·ªçn NCC gi·ªØ nguy√™n
    let selectedSupplierId = null;
    if (suppliers.length > 0) {
        const supplierChoice = prompt(
          `Th√™m kh√°ch s·∫°n "${hotelToAdd.name}".\nCh·ªçn nh√† cung c·∫•p (nh·∫≠p s·ªë):\n` +
          suppliers.map((s, index) => `${index + 1}. ${s.name}`).join('\n') +
          `\n(B·ªè tr·ªëng n·∫øu kh√¥ng mu·ªën ch·ªçn)`
        );
         if (supplierChoice && !isNaN(supplierChoice)) {
           const index = parseInt(supplierChoice, 10) - 1;
           if (index >= 0 && index < suppliers.length) {
             selectedSupplierId = suppliers[index].id;
           }
         }
    }

    // üëá 6. Chu·∫©n b·ªã d·ªØ li·ªáu kh√°ch s·∫°n CHO B·∫¢NG PRODUCTS üëá
    const productData = {
      name: hotelToAdd.name,
      tour_code: hotelCode, // M√£ kh√°ch s·∫°n (duy nh·∫•t)
      price: hotelToAdd.price || null, // Gi√° (c√≥ th·ªÉ null)
      inventory: hotelToAdd.inventory || 50, // S·ªë ph√≤ng m·∫∑c ƒë·ªãnh
      product_type: 'hotel', // <-- QUAN TR·ªåNG
      supplier_id: selectedSupplierId, // NCC n·∫øu c√≥
      image_url: hotelToAdd.image_url || null, // ·∫¢nh ch√≠nh
      description: hotelToAdd.description || null,
      duration: hotelToAdd.duration || 'Gi√° / ƒë√™m', // C√≥ th·ªÉ l√† 'Gi√° / ƒë√™m'
      location: hotelToAdd.location || null,
      rating: hotelToAdd.rating || null,
      galleryImages: hotelToAdd.galleryImages || null, // Th∆∞ vi·ªán ·∫£nh
      approval_status: 'pending', // <-- M·∫∂C ƒê·ªäNH L√Ä CH·ªú DUY·ªÜT
      // Th√™m c√°c c·ªôt kh√°c c·ªßa Products n·∫øu c·∫ßn (v√≠ d·ª•: details)
      details: { // V√≠ d·ª• l∆∞u rating, ti·ªán nghi v√†o details (jsonb)
          rating: hotelToAdd.rating || null,
          amenities: hotelToAdd.amenities || [], // Gi·∫£ s·ª≠ hotels.js c√≥ amenities
      }
    };

    // Th·ª±c hi·ªán INSERT v√†o b·∫£ng Products
    const { error: insertError } = await supabase
      .from('Products') // <-- B·∫£ng Products
      .insert(productData);

    if (insertError) {
      console.error('L·ªói insert hotel:', insertError);
      setAddingStatus((prev) => ({ ...prev, [hotelCode]: 'error' }));
      if (insertError.code === '23505') { // L·ªói tr√πng m√£ (tour_code)
          alert(`L·ªói khi th√™m kh√°ch s·∫°n "${hotelToAdd.name}": M√£ "${hotelCode}" ƒë√£ t·ªìn t·∫°i.`);
          setAddingStatus((prev) => ({ ...prev, [hotelCode]: 'exists' }));
          setDbHotelCodes(prev => new Set(prev).add(hotelCode));
      } else {
          alert(`L·ªói khi th√™m kh√°ch s·∫°n "${hotelToAdd.name}": ${insertError.message}`);
      }
    } else {
      setAddingStatus((prev) => ({ ...prev, [hotelCode]: 'added' }));
      setDbHotelCodes(prev => new Set(prev).add(hotelCode));
      alert(`ƒê√£ th√™m "${hotelToAdd.name}" v√†o danh s√°ch ch·ªù duy·ªát.`);
    }
  };

  // --- RENDER ---
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-800 dark:text-white mb-6">
        Th√™m nhanh Kh√°ch s·∫°n t·ª´ D·ªØ li·ªáu m·∫´u (Ch·ªù duy·ªát)
      </h1>

      {loadingSuppliers ? (
         <div className="flex justify-center items-center h-40">
           <FaSpinner className="animate-spin text-3xl text-sky-500 mr-3" />
           <span>ƒêang t·∫£i d·ªØ li·ªáu...</span>
         </div>
      ) : (
        <div className="bg-white dark:bg-neutral-800 shadow-xl rounded-lg overflow-hidden">
          <ul className="divide-y divide-gray-200 dark:divide-gray-700">
            {/* üëá 7. L·∫∑p qua localHotels üëá */}
            {localHotels.map((hotel) => {
              const hotelCodeString = String(hotel.id);
              const status = addingStatus[hotelCodeString] || (dbHotelCodes.has(hotelCodeString) ? 'exists' : 'idle');

              return (
                <li key={hotel.id} className="px-6 py-4 flex items-center justify-between hover:bg-gray-50 dark:hover:bg-neutral-700">
                  <div className="flex items-center space-x-4">
                    <img
                      src={hotel.image_url || 'https://placehold.co/60x60/eee/ccc?text=Img'} // D√πng image_url
                      alt={hotel.name}
                      className="w-12 h-12 object-cover rounded-md flex-shrink-0"
                    />
                    <div>
                      {/* üëá Hi·ªÉn th·ªã t√™n kh√°ch s·∫°n üëá */}
                      <p className="text-sm font-medium text-gray-900 dark:text-white">{hotel.name}</p>
                      <p className="text-xs text-gray-500 dark:text-gray-400">ID/Code: {hotel.id} - Gi√°: {(hotel.price || 0).toLocaleString('vi-VN')} VNƒê</p>
                    </div>
                  </div>

                  {/* N√∫t Th√™m v√† Tr·∫°ng th√°i */}
                  <div className="flex items-center space-x-2">
                     {status === 'idle' && (
                       <button
                         onClick={() => handleAddHotel(hotel)} // G·ªçi handleAddHotel
                         className="p-2 rounded-full bg-sky-100 text-sky-600 hover:bg-sky-200"
                         title="Th√™m v√†o database (Ch·ªù duy·ªát)"
                       >
                         <FaPlus size={14} />
                       </button>
                     )}
                     {status === 'adding' && (
                       <FaSpinner className="animate-spin text-sky-500" />
                     )}
                     {status === 'added' && (
                       <FaCheckCircle className="text-green-500" title="ƒê√£ th√™m (Ch·ªù duy·ªát)" />
                     )}
                      {status === 'exists' && (
                       <span className="text-xs text-gray-400 italic" title="Kh√°ch s·∫°n n√†y ƒë√£ c√≥ trong database">ƒê√£ t·ªìn t·∫°i</span>
                     )}
                     {status === 'error' && (
                       <button onClick={() => handleAddHotel(hotel)} className="text-red-500 hover:text-red-700" title="L·ªói! B·∫•m ƒë·ªÉ th·ª≠ l·∫°i">
                         <FaExclamationCircle />
                       </button>
                     )}
                  </div>
                </li>
              );
            })}
          </ul>
        </div>
      )}
    </div>
  );
}