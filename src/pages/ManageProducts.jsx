// src/pages/ManageProducts.jsx
import React, { useState, useEffect, useCallback } from "react";
import { getSupabase } from "../lib/supabaseClient";
import { FaSpinner, FaPlus, FaEdit, FaTrash, FaHotel, FaPlane, FaCar, FaUmbrellaBeach, FaTags } from "react-icons/fa";
import ProductModal from "./ProductModal";

const supabase = getSupabase();

// --- D·ªØ li·ªáu Tabs ---
const productTypes = [
    { type: 'tour', label: 'Tours', icon: FaUmbrellaBeach },
    { type: 'hotel', label: 'Kh√°ch s·∫°n', icon: FaHotel },
    { type: 'flight', label: 'Chuy·∫øn bay', icon: FaPlane },
    { type: 'car_rental', label: 'Thu√™ xe', icon: FaCar },
    // { type: 'all', label: 'T·∫•t c·∫£', icon: FaTags }, // T√πy ch·ªçn: Th√™m tab "T·∫•t c·∫£"
];

// Helper ƒë·ªÉ l·∫•y Icon/Title
const getProductTypeDetails = (type) => {
    // T√¨m trong m·∫£ng productTypes ho·∫∑c tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh l√† Tour
    const details = productTypes.find(pt => pt.type === type);
    return details || { icon: FaUmbrellaBeach, title: 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh' };
};


// --- Component con hi·ªÉn th·ªã T·ªìn kho --- (ƒê∆∞a l√™n ƒë·∫ßu cho r√µ)
const InventoryStatus = ({ inventory }) => {
    return inventory > 0 ? (
        <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
            C√≤n h√†ng ({inventory})
        </span>
    ) : (
        <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
            H·∫øt h√†ng
        </span>
    );
};


// --- Component ch√≠nh ---
export default function ManageProducts() {
    const [products, setProducts] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [selectedType, setSelectedType] = useState('tour');
    const [showModal, setShowModal] = useState(false);
    const [productToEdit, setProductToEdit] = useState(null);

    // L·∫•y ti√™u ƒë·ªÅ ƒë·ªông d·ª±a tr√™n selectedType
    const currentProductDetails = getProductTypeDetails(selectedType);

    const fetchData = useCallback(async () => {
        setLoading(true);
        setError(null);
        setProducts([]);

        let productQuery = supabase.from("Products")
                            .select(`*, supplier_name:Suppliers(name)`) // D√πng alias supplier_name
                            .order('created_at', { ascending: false });

        // Ch·ªâ l·ªçc n·∫øu type h·ª£p l·ªá trong danh s√°ch
        if (productTypes.some(pt => pt.type === selectedType)) {
             productQuery = productQuery.eq("product_type", selectedType);
        } // else: N·∫øu selectedType l√† 'all' ho·∫∑c kh√¥ng h·ª£p l·ªá, l·∫•y t·∫•t c·∫£ (ho·∫∑c b·∫°n c√≥ th·ªÉ b√°o l·ªói)

        const [productResponse, supplierResponse] = await Promise.all([
            productQuery,
            supabase.from("Suppliers").select("id, name")
        ]);

        if (productResponse.error) {
           setError("L·ªói fetch s·∫£n ph·∫©m: " + productResponse.error.message);
        } else {
           setProducts(productResponse.data || []);
        }
        if (supplierResponse.error) {
           console.error("L·ªói fetch suppliers:", supplierResponse.error);
           setSuppliers([]);
        } else {
           setSuppliers(supplierResponse.data || []);
        }

        setLoading(false);
    }, [selectedType]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const handleAddNew = () => {
        setProductToEdit(null);
        setShowModal(true);
    };

    const handleEdit = (product) => {
        setProductToEdit(product);
        setShowModal(true);
    };

    const handleDelete = async (productId) => {
        if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) {
            const { error } = await supabase.from("Products").delete().eq("id", productId);
            if (error) { alert("L·ªói x√≥a s·∫£n ph·∫©m: " + error.message); }
            else { alert("X√≥a th√†nh c√¥ng!"); fetchData(); }
        }
    };

    return ( // M·ªü return
        <div className="p-4 md:p-6 space-y-6"> {/* M·ªü div ch√≠nh */}

            {/* Thanh Header v√† Tabs L·ªçc */}
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
                 <h1 className="text-2xl md:text-3xl font-bold text-slate-800 dark:text-white flex items-center gap-3">
                     <FaTags size={24} className="text-sky-600"/>
                     <span>Qu·∫£n l√Ω S·∫£n ph·∫©m</span>
                 </h1>
                 <button onClick={handleAddNew} /* ... */ >
                     <FaPlus />
                     <span>Th√™m S·∫£n ph·∫©m m·ªõi</span>
                 </button>
            </div>

            {/* Tabs L·ªçc */}
            <div className="mb-6 border-b border-gray-200 dark:border-gray-700">
                <nav className="-mb-px flex space-x-6 overflow-x-auto" aria-label="Tabs">
                    {productTypes.map((tab) => { // M·ªü map
                        const TabIcon = tab.icon;
                        const isActive = selectedType === tab.type;
                        return ( // M·ªü return button
                            <button key={tab.type} onClick={() => setSelectedType(tab.type)} /* ... */ >
                                <TabIcon size={16} />
                                {tab.label}
                            </button>
                        ); // ƒê√≥ng return button
                     })} {/* ƒê√≥ng map */}
                </nav>
            </div>

            {/* B·∫£ng D·ªØ li·ªáu */}
            {loading ? ( // M·ªü loading ternary
                <div className="flex justify-center items-center h-64"> <FaSpinner /* ... */ /> </div>
            ) : error ? ( // M·ªü error ternary
                <div className="text-red-500 ...">L·ªói: {error}</div>
            ) : ( // M·ªü else (hi·ªÉn th·ªã b·∫£ng)
                <div className="bg-white dark:bg-slate-800 shadow-xl rounded-lg overflow-hidden border dark:border-slate-700"> {/* M·ªü table container */}
                    <div className="overflow-x-auto"> {/* M·ªü overflow div */}
                        <table className="min-w-full divide-y divide-gray-200 dark:divide-slate-700"> {/* M·ªü table */}
                            <thead className="bg-gray-50 dark:bg-slate-700"> {/* M·ªü thead */}
                                <tr> {/* M·ªü tr */}
                                    {/* C√°c th */}
                                    <th /* ... */>M√£ SP</th>
                                    <th /* ... */>T√™n s·∫£n ph·∫©m</th>
                                    <th /* ... */>Nh√† cung c·∫•p</th>
                                    <th /* ... */>Gi√°</th>
                                    <th /* ... */>T·ªìn kho</th>
                                    <th /* ... */>H√†nh ƒë·ªông</th>
                                </tr> {/* ƒê√≥ng tr */}
                            </thead> {/* ƒê√≥ng thead */}
                            <tbody className="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-slate-700"> {/* M·ªü tbody */}
                                {products.length > 0 ? products.map((product) => ( // M·ªü map products
                                    <tr key={product.id} className="hover:bg-gray-50 dark:hover:bg-slate-700/50 transition-colors"> {/* M·ªü tr product */}
                                        <td /* ... */>{product.tour_code}</td>
                                        <td /* ... */>{product.name}</td>
                                        <td /* ... */>
                                            {/* D√πng supplier_name t·ª´ alias */}
                                            {product.supplier_name ? product.supplier_name : <span className="text-gray-400 italic">N/A</span>}
                                        </td>
                                        <td /* ... */>{product.price.toLocaleString("vi-VN")} VNƒê</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm"> {/* M·ªü td inventory */}
                                            {/* üëá S·ª¨A L·∫†I ·ªû ƒê√ÇY: D√πng component InventoryStatus üëá */}
                                            <InventoryStatus inventory={product.inventory} />
                                        </td> {/* ƒê√≥ng td inventory */}
                                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-3"> {/* M·ªü td actions */}
                                             <button onClick={() => handleEdit(product)} /* ... */><FaEdit size={18} /></button>
                                             <button onClick={() => handleDelete(product.id)} /* ... */><FaTrash size={18} /></button>
                                        </td> {/* ƒê√≥ng td actions */}
                                    </tr> // ƒê√≥ng tr product
                                )) : ( // M·ªü else (kh√¥ng c√≥ product)
                                     <tr> {/* M·ªü tr empty */}
                                         <td colSpan={6} className="px-6 py-10 text-center text-gray-500 dark:text-gray-400 italic">
                                             Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o thu·ªôc lo·∫°i "{currentProductDetails.title}". {/* D√πng title ƒë·ªông */}
                                         </td>
                                     </tr> // ƒê√≥ng tr empty
                                )} {/* ƒê√≥ng map products ternary */}
                            </tbody> {/* ƒê√≥ng tbody */}
                        </table> {/* ƒê√≥ng table */}
                    </div> {/* ƒê√≥ng overflow div */}
                </div> // ƒê√≥ng table container
            )} {/* ƒê√≥ng loading/error ternary */}

            {/* Modal Th√™m/S·ª≠a */}
            {showModal && ( // M·ªü showModal
                <ProductModal
                    show={showModal}
                    onClose={() => setShowModal(false)}
                    onSuccess={fetchData}
                    productToEdit={productToEdit}
                    productType={selectedType !== 'all' ? selectedType : 'tour'}
                    suppliers={suppliers}
                />
            )} {/* ƒê√≥ng showModal */}

        </div> // ƒê√≥ng div ch√≠nh
    ); // ƒê√≥ng return
} // <--- üö® ƒê√ÇY L√Ä D·∫§U NGO·∫∂C NH·ªåN CU·ªêI C√ôNG, ƒê·∫¢M B·∫¢O N√ì C√ì T·ªíN T·∫†I!