// src/pages/Payment.jsx
import React, { useState, useMemo, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { useCart } from "../context/CartContext.jsx";
import { motion, AnimatePresence } from "framer-motion";
import { FaUserFriends, FaMapMarkerAlt, FaCreditCard, FaShuttleVan, FaUsers, FaSpinner } from "react-icons/fa"; // Th√™m FaSpinner
import { IoIosMail, IoIosCall } from "react-icons/io";
import { getSupabase } from "../lib/supabaseClient";

const supabase = getSupabase();

const InfoInput = ({ icon: Icon, ...props }) => ( // S·ª≠a l·∫°i Icon prop
    <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            {/* S·ª≠ d·ª•ng Icon component */}
            {Icon && <Icon className="text-gray-400" />}
        </div>
        <input
            {...props}
            className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white" // Th√™m dark mode styles
        />
    </div>
);


export default function Payment() {
    const navigate = useNavigate();
    const location = useLocation();

    // S·ª≠a l·∫°i c√°ch l·∫•y total t·ª´ context n·∫øu CartContext cung c·∫•p total
    const { items: cartItemsFromContext, clearCart, total: totalFromContext } = useCart();

    const itemsFromState = location.state?.items;
    const cartItems = itemsFromState || cartItemsFromContext;

    const [currentUser, setCurrentUser] = useState(null);
    const [loadingUser, setLoadingUser] = useState(true); // Th√™m state loading user

    const [contactInfo, setContactInfo] = useState({ name: "", phone: "", email: "", address: "" });
    const [notes, setNotes] = useState("");
    const [paymentMethod, setPaymentMethod] = useState("direct");
    const [selectedBranch, setSelectedBranch] = useState("S·ªë 123, ƒê∆∞·ªùng ABC, Qu·∫≠n Ho√†n Ki·∫øm, H√† N·ªôi");
    const [agreedToTerms, setAgreedToTerms] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [notification, setNotification] = useState({ message: "", type: "" });
    const [useShuttle, setUseShuttle] = useState(false);
    const [shuttleAddress, setShuttleAddress] = useState("");

    const shuttlePrice = 400000;
    const discount = 800000;
    const formatCurrency = (num) => {
        if (typeof num !== 'number' || isNaN(num)) return "0 ‚Ç´";
        return new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(num);
    };

    // T√≠nh l·∫°i t·ªïng ti·ªÅn d·ª±a tr√™n cartItems th·ª±c t·∫ø (ho·∫∑c d√πng total t·ª´ context n·∫øu c√≥)
    const total = useMemo(() => {
        // N·∫øu context ƒë√£ cung c·∫•p total v√† kh√¥ng ph·∫£i tr∆∞·ªùng h·ª£p "ƒê·∫∑t Ngay", d√πng total ƒë√≥
        if (totalFromContext !== undefined && !itemsFromState) {
            return totalFromContext;
        }
        // N·∫øu kh√¥ng, t·ª± t√≠nh l·∫°i t·ª´ cartItems hi·ªán t·∫°i
        return cartItems.reduce((sum, item) => {
            const adultPrice = item.priceAdult || item.price || 0; // Th√™m fallback cho item.price
            const childPrice = item.priceChild || 0;
            // T√≠nh t·ªïng cho item n√†y (kh√¥ng t√≠nh infant)
            const itemTotal = (item.adults * adultPrice) + ((item.children || 0) * childPrice) + (item.singleSupplement || 0);
            return sum + itemTotal;
        }, 0);
    }, [cartItems, itemsFromState, totalFromContext]);


    const totalPassengers = useMemo(
        () => cartItems.reduce((sum, item) => sum + (item.adults || 0) + (item.children || 0) + (item.infants || 0), 0),
        [cartItems]
    );

    const finalTotal = useMemo(() => {
        const calculatedTotal = total + (useShuttle ? shuttlePrice : 0) - discount;
        return Math.max(0, calculatedTotal);
    }, [total, useShuttle, discount, shuttlePrice]);

    const paymentDeadline = useMemo(() => {
        // Logic t√≠nh deadline gi·ªØ nguy√™n
        if (!cartItems || cartItems.length === 0) return new Date();
         const earliestDate =
           cartItems
             .map((item) => item.departureDates?.[0]) // V·∫´n l·∫•y ng√†y ƒë·∫ßu ti√™n n·∫øu c√≥
             .filter(Boolean)
             .map((dateStr) => new Date(dateStr))
             .sort((a, b) => a - b)[0] || new Date(); // N·∫øu ko c√≥ ng√†y n√†o th√¨ d√πng ng√†y hi·ªán t·∫°i
         earliestDate.setDate(earliestDate.getDate() - 7);
         return earliestDate;
    }, [cartItems]);

    const formattedDeadline = paymentDeadline.toLocaleDateString("vi-VN", {
        weekday: "long", year: "numeric", month: "long", day: "numeric",
    });

    useEffect(() => {
        async function getUserData() {
            setLoadingUser(true);
            const { data: { user } } = await supabase.auth.getUser();
            setCurrentUser(user);

            if (user) {
                setContactInfo(prev => ({ ...prev, email: user.email }));
                const { data: userData, error } = await supabase
                    .from('Users')
                    .select('full_name') // Ch·ªâ l·∫•y t√™n
                    .eq('id', user.id)
                    .single();
                if (userData) {
                    setContactInfo(prev => ({
                        ...prev,
                        name: userData.full_name || prev.name,
                    }));
                }
            }
            setLoadingUser(false);
        }
        getUserData();
    }, []);


    const handleInputChange = (e, setState) => setState((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    const showNotification = (message, type = "error") => {
        setNotification({ message, type });
        setTimeout(() => setNotification({ message: "", type: "" }), 4000);
    };

    const handleCheckout = async (e) => {
        e.preventDefault();
        // ... (c√°c ki·ªÉm tra input gi·ªØ nguy√™n) ...
        if (!contactInfo.name || !contactInfo.phone || !contactInfo.email) {
          showNotification("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin li√™n l·∫°c."); return;
        }
        if (useShuttle && !shuttleAddress) {
          showNotification("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ ƒë∆∞a ƒë√≥n c·ªßa b·∫°n."); return;
        }
        if (!agreedToTerms) {
          showNotification("B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n v√† ch√≠nh s√°ch."); return;
        }

        setIsSubmitting(true);
        const orderId = `TOURZEN-${Date.now()}`;

        if (!currentUser && !loadingUser) { // Ch·ªâ ki·ªÉm tra khi ƒë√£ load xong user
            showNotification("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t tour.");
            setIsSubmitting(false);
            navigate('/login', { state: { from: location } });
            return;
        }
        // ƒê·∫£m b·∫£o currentUser c√≥ gi√° tr·ªã tr∆∞·ªõc khi ti·∫øp t·ª•c
        if (!currentUser) {
             showNotification("ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng, vui l√≤ng ƒë·ª£i...");
             setIsSubmitting(false);
             return;
        }


        let bookingErrorOccurred = false;
        const bookingIds = [];

        for (const item of cartItems) {
            const quantity = (item.adults || 0) + (item.children || 0);
            // L·∫•y gi√° ƒë√∫ng t·ª´ item (priceAdult ho·∫∑c price)
            const adultPrice = item.priceAdult ?? item.price ?? 0;
            const childPrice = item.priceChild ?? 0;
            const itemTotalPrice = (item.adults * adultPrice) + ((item.children || 0) * childPrice) + (item.singleSupplement || 0);

            // üëá B·ªé HO·∫∂C COMMENT L·∫†I KH·ªêI KI·ªÇM TRA NG√ÄY KH·ªûI H√ÄNH üëá
            /*
            const departureDate = item.departureDates?.[0];
            if (!departureDate) {
                console.error(`Tour "${item.title}" thi·∫øu ng√†y kh·ªüi h√†nh.`);
                showNotification(`Tour "${item.title}" thi·∫øu th√¥ng tin ng√†y kh·ªüi h√†nh.`);
                bookingErrorOccurred = true;
                break;
            }
            */
            // ---------------------------------------------

            // L·∫•y tourId ƒë√∫ng c√°ch (tourId ho·∫∑c id)
            const productId = item.tourId ?? item.id;
             if (!productId) {
                 console.error(`Item "${item.title}" thi·∫øu ID s·∫£n ph·∫©m.`);
                 showNotification(`S·∫£n ph·∫©m "${item.title}" trong gi·ªè h√†ng b·ªã l·ªói ID.`);
                 bookingErrorOccurred = true;
                 break;
             }

            const { data: bookingData, error: insertError } = await supabase
                .from('Bookings')
                .insert({
                    user_id: currentUser.id,
                    product_id: productId, // D√πng productId ƒë√£ l·∫•y
                    quantity: quantity,
                    total_price: itemTotalPrice,
                    status: 'pending',
                    notes: notes,
                    // departure_date: departureDate, // <-- T·∫°m th·ªùi b·ªè c·ªôt n√†y
                    num_adults: item.adults,
                    num_children: item.children || 0,
                    num_infants: item.infants || 0,
                    shuttle_address: useShuttle ? shuttleAddress : null,
                })
                .select('id')
                .single();

            if (insertError) {
                console.error(`L·ªói khi l∆∞u booking cho s·∫£n ph·∫©m ${productId}:`, insertError);
                showNotification(`ƒê√£ x·∫£y ra l·ªói khi l∆∞u ƒë·∫∑t ch·ªó cho "${item.title}". Vui l√≤ng th·ª≠ l·∫°i.`);
                bookingErrorOccurred = true;
                break;
            } else if (bookingData) {
                bookingIds.push(bookingData.id);
            }
        }

        if (bookingErrorOccurred) {
            setIsSubmitting(false);
            return;
        }
        // --- K·∫øt th√∫c l∆∞u v√†o Database ---

        // --- G·ª≠i Email X√°c Nh·∫≠n ---
        // ... (Gi·ªØ nguy√™n logic g·ª≠i email c·ªßa b·∫°n) ...
         const tour_details_html = `<ul>${cartItems
           .map(item => `<li><b>${item.title}</b> (${item.adults} NL, ${item.children || 0} TE, ${item.infants || 0} EB)</li>`)
           .join("")}</ul>`;

         try {
           const response = await fetch("/api/sendEmail", { /* ... */ }); // Gi·ªØ nguy√™n fetch

           if (!response.ok) {
             console.error("G·ª≠i email th·∫•t b·∫°i, nh∆∞ng booking ƒë√£ ƒë∆∞·ª£c l∆∞u.");
             showNotification("ƒê·∫∑t tour th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n.", "warning");
           } else {
             showNotification("ƒê·∫∑t tour th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email.", "success");
           }

           if (!itemsFromState) {
             clearCart();
           }

           navigate("/payment-success", { state: { /* ... */ } }); // Gi·ªØ nguy√™n navigate

         } catch (error) {
           console.error("L·ªói khi g·ª≠i email:", error);
           showNotification("ƒê·∫∑t tour th√†nh c√¥ng nh∆∞ng c√≥ l·ªói khi g·ª≠i email x√°c nh·∫≠n.", "warning");
           navigate("/payment-success", { state: { /* ... */ } });
         } finally {
           setIsSubmitting(false);
         }
    };

    if (!cartItems || cartItems.length === 0) {
        return <div className="text-center py-20 text-xl font-semibold dark:text-white">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</div>; // Th√™m dark mode
    }

    return (
        <div className="bg-gray-100 dark:bg-neutral-900 min-h-screen py-8 px-4 sm:px-6 lg:px-8"> {/* Th√™m dark mode */}
            {/* --- Ph·∫ßn JSX --- */}
            {/* Gi·ªØ nguy√™n c·∫•u tr√∫c JSX c·ªßa b·∫°n, nh∆∞ng ƒë·∫£m b·∫£o th√™m dark mode styles */}
            <div className="max-w-7xl mx-auto">
                <div className="text-center mb-8">
                    <h1 className="text-3xl font-bold text-blue-800 dark:text-sky-400">X√ÅC NH·∫¨N ƒê·∫∂T TOUR</h1> {/* Th√™m dark mode */}
                </div>

                <form onSubmit={handleCheckout} className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    {/* --- C·ªôt tr√°i --- */}
                    <div className="lg:col-span-2 space-y-6">
                        {/* Th√¥ng tin li√™n l·∫°c */}
                        <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md"> {/* Th√™m dark mode */}
                            <h2 className="text-xl font-bold mb-4 dark:text-white">TH√îNG TIN LI√äN L·∫†C</h2> {/* Th√™m dark mode */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <InfoInput icon={FaUserFriends} /* ... props ... */ />
                                <InfoInput icon={IoIosCall} /* ... props ... */ />
                                <InfoInput icon={IoIosMail} /* ... props ... */ />
                                <InfoInput icon={FaMapMarkerAlt} /* ... props ... */ />
                            </div>
                            {loadingUser ? (
                                <p className="text-sm text-gray-500 mt-2">ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>
                            ) : currentUser ? (
                                <p className="text-sm text-green-600 mt-2">ƒêang ƒë·∫∑t h√†ng v·ªõi t√†i kho·∫£n: {currentUser.email}</p>
                            ) : (
                                <p className="text-sm text-blue-600 mt-2">B·∫°n c√≥ mu·ªën <Link to="/login" state={{ from: location }} className="font-bold underline">ƒêƒÉng nh·∫≠p</Link> ƒë·ªÉ qu·∫£n l√Ω ƒë∆°n h√†ng?</p>
                            )}
                        </div>

                        {/* D·ªãch v·ª• c·ªông th√™m */}
                        <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md"> {/* Th√™m dark mode */}
                           {/* ... JSX D·ªãch v·ª• c·ªông th√™m ... */}
                           <h2 className="text-xl font-bold flex items-center gap-2 mb-4 dark:text-white"> {/* Th√™m dark mode */}
                               <FaShuttleVan className="text-blue-500" /> D·ªäCH V·ª§ C·ªòNG TH√äM
                           </h2>
                           <div className="bg-blue-50 dark:bg-sky-900/30 p-4 rounded-lg"> {/* Th√™m dark mode */}
                               <label className="flex items-center cursor-pointer">
                                   <input /* ... */ />
                                   <div className="ml-4 flex-1">
                                       <p className="font-semibold text-blue-800 dark:text-sky-300">TourZen Xpress - Xe ƒë∆∞a ƒë√≥n ri√™ng</p> {/* Th√™m dark mode */}
                                       <p className="text-sm text-gray-600 dark:text-gray-400">T√†i x·∫ø ri√™ng s·∫Ω ƒë√≥n b·∫°n t·∫°i nh√†/s√¢n bay.</p> {/* Th√™m dark mode */}
                                   </div>
                                   <span className="font-bold text-blue-600 dark:text-sky-400">{formatCurrency(shuttlePrice)}</span> {/* Th√™m dark mode */}
                               </label>
                               <AnimatePresence>
                                   {useShuttle && (
                                       <motion.div /* ... */ >
                                           <InfoInput icon={FaMapMarkerAlt} /* ... */ />
                                       </motion.div>
                                   )}
                               </AnimatePresence>
                           </div>
                        </div>

                        {/* Ghi ch√∫ */}
                        <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md"> {/* Th√™m dark mode */}
                           <h2 className="text-xl font-bold mb-4 dark:text-white">GHI CH√ö</h2> {/* Th√™m dark mode */}
                           <textarea /* ... */ className="w-full h-24 px-3 py-2 border border-gray-300 rounded-md dark:bg-neutral-700 dark:border-neutral-600 dark:text-white"/> {/* Th√™m dark mode */}
                        </div>

                        {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
                        <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md"> {/* Th√™m dark mode */}
                           <h2 className="text-xl font-bold mb-4 dark:text-white">PH∆Ø∆†NG TH·ª®C THANH TO√ÅN</h2> {/* Th√™m dark mode */}
                            {/* ... JSX Ph∆∞∆°ng th·ª©c thanh to√°n ... */}
                            <div className="space-y-4">
                                <label /* ... */ >
                                    <input /* ... */ />
                                    <div className="ml-4">
                                        <p className="font-semibold dark:text-white">Thanh to√°n tr·ª±c ti·∫øp</p> {/* Th√™m dark mode */}
                                        <p className="text-sm text-gray-600 dark:text-gray-400">ƒê·∫∑t l·ªãch h·∫πn v√† thanh to√°n t·∫°i vƒÉn ph√≤ng.</p> {/* Th√™m dark mode */}
                                    </div>
                                </label>
                                <AnimatePresence>
                                    {paymentMethod === "direct" && (
                                        <motion.div /* ... */ className="pl-8 space-y-2 dark:text-gray-300"> {/* Th√™m dark mode */}
                                            {/* ... */}
                                            <select /* ... */ className="w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-neutral-700 dark:border-neutral-600 dark:text-white"/> {/* Th√™m dark mode */}
                                        </motion.div>
                                    )}
                                </AnimatePresence>
                                <label /* ... */ >
                                    <input /* ... */ />
                                    <div className="ml-4 flex items-center">
                                        <p className="font-semibold mr-2 dark:text-white">Thanh to√°n qua VNPay</p> {/* Th√™m dark mode */}
                                        {/* ... */}
                                    </div>
                                </label>
                            </div>
                        </div>
                    </div>

                    {/* --- C·ªôt ph·∫£i: t√≥m t·∫Øt ƒë∆°n --- */}
                    <aside className="lg:col-span-1">
                        <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md sticky top-8"> {/* Th√™m dark mode */}
                           <h2 className="text-xl font-bold mb-4 border-b pb-2 dark:border-neutral-700 dark:text-white">T√ìM T·∫ÆT ƒê∆†N H√ÄNG</h2> {/* Th√™m dark mode */}
                            <div className="space-y-4 max-h-64 overflow-y-auto pr-2 mb-4">
                                {cartItems.map((item) => (
                                    <div key={item.key || item.id} className="flex gap-4 border-b pb-2 last:border-0 dark:border-neutral-700"> {/* Th√™m dark mode */}
                                        {/* ... JSX h√¨nh ·∫£nh, t√™n tour ... */}
                                        <div>
                                           <p className="font-bold text-sm text-blue-800 dark:text-sky-400">{item.title}</p> {/* Th√™m dark mode */}
                                           <p className="text-xs text-gray-500 dark:text-gray-400">{`${item.adults || 0} NL, ${ item.children || 0 } TE, ${item.infants || 0} EB`}</p> {/* Th√™m dark mode */}
                                           <p className="text-sm font-semibold dark:text-white"> {/* Th√™m dark mode */}
                                               {formatCurrency( (item.adults * (item.priceAdult ?? item.price ?? 0)) + ((item.children || 0) * (item.priceChild || 0)) )} {/* S·ª≠a l·∫°i t√≠nh gi√° */}
                                           </p>
                                       </div>
                                    </div>
                                ))}
                            </div>

                            <div className="space-y-2 text-sm border-t pt-4 dark:border-neutral-700 dark:text-gray-300"> {/* Th√™m dark mode */}
                               {/* ... JSX T·∫°m t√≠nh, Ph√≠ xe, ∆Øu ƒë√£i ... */}
                               <div className="flex justify-between font-semibold"> {/* ... */} </div>
                               <div className="flex justify-between"> {/* ... */} </div>
                               {useShuttle && ( <div className="flex justify-between"> {/* ... */} </div> )}
                               <div className="flex justify-between text-red-600"> {/* ... */} </div>
                            </div>

                            <div className="mt-4 pt-4 border-t flex justify-between items-center dark:border-neutral-700"> {/* Th√™m dark mode */}
                               <span className="text-lg font-bold dark:text-white">T·ªïng c·ªông</span> {/* Th√™m dark mode */}
                                <span className="text-2xl font-bold text-red-600">{formatCurrency(finalTotal)}</span>
                            </div>

                            <div className="mt-6">
                                <label className="flex items-center">
                                    <input type="checkbox" checked={agreedToTerms} onChange={(e) => setAgreedToTerms(e.target.checked)} className="w-4 h-4"/>
                                    <span className="ml-2 text-sm dark:text-gray-300"> T√¥i ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω v·ªõi <a href="#" className="text-blue-600"> Ch√≠nh s√°ch </a> v√† <a href="#" className="text-blue-600"> ƒêi·ªÅu kho·∫£n </a> . </span> {/* Th√™m dark mode */}
                                </label>
                            </div>

                            {/* Th√¥ng b√°o l·ªói */}
                            {notification.message && (
                                <p className={`mt-4 text-sm ${notification.type === 'error' ? 'text-red-600' : 'text-green-600'}`}>{notification.message}</p>
                            )}

                            <button
                                type="submit"
                                // C·∫≠p nh·∫≠t disable logic
                                disabled={isSubmitting || loadingUser || (!currentUser && !loadingUser)}
                                className="w-full mt-6 bg-red-600 text-white font-bold py-3 rounded-lg hover:bg-red-700 transition-all disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center gap-2" // Th√™m disabled:cursor-not-allowed
                            >
                                {isSubmitting ? <FaSpinner className="animate-spin" /> : <FaCreditCard />} {/* D√πng FaSpinner */}
                                {isSubmitting ? "ƒêANG X·ª¨ L√ù..." : "X√ÅC NH·∫¨N ƒê·∫∂T TOUR"}
                            </button>
                        </div>
                    </aside>
                </form>
            </div>

            {/* Th√¥ng b√°o AnimatePresence gi·ªØ nguy√™n */}
            <AnimatePresence>
                {notification.message && (
                    <motion.div /* ... */ >
                        {notification.message}
                    </motion.div>
                )}
            </AnimatePresence>
        </div>
    );
}