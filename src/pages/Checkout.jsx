// src/pages/Checkout.jsx
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useCart } from '../context/CartContext';
import { FaUser, FaPhone, FaEnvelope, FaMapMarkerAlt, FaRegStickyNote, FaCreditCard, FaSpinner } from 'react-icons/fa';

// üëá TH√äM 2 D√íNG N√ÄY üëá
import { getSupabase } from "../lib/supabaseClient";
const supabase = getSupabase();

// ... (Ph·∫ßn code c√≤n l·∫°i c·ªßa component gi·ªØ nguy√™n) ...

const InputField = ({ icon: Icon, ...props }) => (
    // ... (Component InputField gi·ªØ nguy√™n)
     <div className="relative">
      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <Icon className="text-gray-400" />
      </div>
      <input
        {...props}
        className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white"
      />
    </div>
);


export default function Checkout() {
    const { items: cartItems, total, clearCart } = useCart();
    const location = useLocation();
    const navigate = useNavigate();

    // L·∫•y th√¥ng tin user ƒëƒÉng nh·∫≠p (n·∫øu c√≥)
    const [currentUser, setCurrentUser] = useState(null);
    const [loadingUser, setLoadingUser] = useState(true); // Th√™m state loading user

    const [contactInfo, setContactInfo] = useState({ name: '', phone: '', email: '', address: '' });
    const [notes, setNotes] = useState('');
    const [paymentMethod, setPaymentMethod] = useState('direct'); // Gi·∫£ s·ª≠ m·∫∑c ƒë·ªãnh l√† tr·ª±c ti·∫øp
    const [agreedToTerms, setAgreedToTerms] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');

    const formatCurrency = (num) => { /* ... */ }; // Gi·ªØ nguy√™n h√†m format

     // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng khi component mount
     useEffect(() => {
        async function getUserData() {
            setLoadingUser(true); // B·∫Øt ƒë·∫ßu loading
            // Gi·ªù 'supabase' ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
            const { data: { user }, error: authError } = await supabase.auth.getUser();

            if (authError) {
                console.error("L·ªói l·∫•y auth user:", authError);
                // C√≥ th·ªÉ kh√¥ng c·∫ßn b√°o l·ªói ·ªü ƒë√¢y, user c√≥ th·ªÉ ch∆∞a ƒëƒÉng nh·∫≠p
            } else if (user) {
                setCurrentUser(user);
                setContactInfo(prev => ({ ...prev, email: user.email }));

                const { data: userData, error: userError } = await supabase
                    .from('Users')
                    .select('full_name') // Ch·ªâ l·∫•y t√™n
                    .eq('id', user.id)
                    .single();

                 if (userError) {
                    console.error("L·ªói l·∫•y user details:", userError);
                 } else if (userData) {
                    setContactInfo(prev => ({
                        ...prev,
                        name: userData.full_name || prev.name,
                    }));
                 }
            }
            setLoadingUser(false); // K·∫øt th√∫c loading
        }
        getUserData();
     }, []);


    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setContactInfo(prev => ({ ...prev, [name]: value }));
    };

    const handleCheckout = async (e) => {
        e.preventDefault();
        setError(''); // Reset l·ªói
        if (!contactInfo.name || !contactInfo.phone || !contactInfo.email) {
            setError("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin li√™n l·∫°c (H·ªç t√™n, ƒêi·ªán tho·∫°i, Email)."); return;
        }
        if (!agreedToTerms) {
            setError("B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒêi·ªÅu kho·∫£n & Ch√≠nh s√°ch."); return;
        }
        if (!currentUser && !loadingUser) { // Ch·ªâ ki·ªÉm tra n·∫øu ƒë√£ load xong user
             setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t tour.");
             navigate('/login', { state: { from: location } });
             return;
         }

        setIsSubmitting(true);

        const bookingPromises = cartItems.map((item) => {
            const quantity = (item.adults || 0) + (item.children || 0);
            const itemTotalPrice = (item.adults * item.priceAdult) + ((item.children || 0) * (item.priceChild || 0)) + (item.singleSupplement || 0);
            const departureDate = item.departureDates?.[0];

             if (!departureDate) {
                 console.error(`Tour "${item.title}" thi·∫øu ng√†y kh·ªüi h√†nh.`);
                 // N√©m l·ªói ƒë·ªÉ Promise.all b·∫Øt ƒë∆∞·ª£c
                 throw new Error(`Tour "${item.title}" thi·∫øu th√¥ng tin ng√†y kh·ªüi h√†nh.`);
             }

            return supabase.from('Bookings').insert({
                user_id: currentUser.id,
                product_id: item.tourId,
                quantity: quantity,
                total_price: itemTotalPrice,
                status: 'pending',
                notes: notes,
                departure_date: departureDate,
                num_adults: item.adults,
                num_children: item.children || 0,
                num_infants: item.infants || 0,
                // Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu c·∫ßn
            });
        });

        try {
            const results = await Promise.all(bookingPromises);
            const anyError = results.some((result) => result.error);

            if (anyError) {
                const firstError = results.find(r => r.error)?.error;
                throw new Error(firstError?.message || "L·ªói khi t·∫°o m·ªôt ho·∫∑c nhi·ªÅu ƒë∆°n h√†ng.");
            }

            // G·ª≠i email (Gi·ªØ nguy√™n logic c·ªßa b·∫°n n·∫øu c√≥)
            // ... await fetch('/api/sendEmail', {...}) ...

            clearCart();
            navigate('/payment-success'); // Ho·∫∑c trang th√†nh c√¥ng c·ªßa b·∫°n

        } catch (err) {
            console.error("L·ªói checkout:", err);
            setError(err.message);
        } finally {
            setIsSubmitting(false);
        }
    };

    // --- (Ph·∫ßn JSX c·ªßa b·∫°n gi·ªØ nguy√™n) ---
    // ƒê·∫£m b·∫£o JSX s·ª≠ d·ª•ng ƒë√∫ng c√°c state (contactInfo, notes, agreedToTerms, etc.)
    // v√† g·ªçi ƒë√∫ng h√†m handleCheckout khi submit form.
    return (
     <div className="bg-gray-100 dark:bg-neutral-900 min-h-screen py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
            <h1 className="text-3xl font-bold text-center text-gray-900 dark:text-white mb-8">Thanh To√°n ƒê∆°n H√†ng</h1>
            {loadingUser ? (
                 <div className="flex justify-center items-center h-40">
                    <FaSpinner className="animate-spin text-3xl text-sky-500" />
                 </div>
            ) : (
             <form onSubmit={handleCheckout} className="grid grid-cols-1 md:grid-cols-2 gap-8">
                {/* C·ªôt tr√°i: Th√¥ng tin & Thanh to√°n */}
                <div className="space-y-6">
                    {/* Th√¥ng tin li√™n l·∫°c */}
                    <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow">
                        <h2 className="text-xl font-semibold mb-4 dark:text-white">Th√¥ng Tin Li√™n L·∫°c</h2>
                        <div className="space-y-4">
                            <InputField icon={FaUser} name="name" placeholder="H·ªç v√† t√™n *" value={contactInfo.name} onChange={handleInputChange} required />
                            <InputField icon={FaPhone} name="phone" type="tel" placeholder="S·ªë ƒëi·ªán tho·∫°i *" value={contactInfo.phone} onChange={handleInputChange} required />
                            <InputField icon={FaEnvelope} name="email" type="email" placeholder="Email *" value={contactInfo.email} onChange={handleInputChange} required disabled={!!currentUser} />
                            <InputField icon={FaMapMarkerAlt} name="address" placeholder="ƒê·ªãa ch·ªâ (kh√¥ng b·∫Øt bu·ªôc)" value={contactInfo.address} onChange={handleInputChange} />
                             {currentUser && <p className="text-xs text-green-600">ƒê·∫∑t h√†ng v·ªõi t√†i kho·∫£n: {currentUser.email}</p>}
                             {!currentUser && <p className="text-xs text-blue-600">B·∫°n c·∫ßn <Link to="/login" state={{ from: location }} className="underline font-medium">ƒëƒÉng nh·∫≠p</Link> ƒë·ªÉ ti·∫øp t·ª•c.</p>}
                        </div>
                    </div>

                    {/* Ghi ch√∫ */}
                    <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow">
                        <h2 className="text-xl font-semibold mb-4 dark:text-white">Ghi Ch√∫ ƒê∆°n H√†ng</h2>
                        <textarea
                            name="notes"
                            placeholder="Y√™u c·∫ßu ƒë·∫∑c bi·ªát (v√≠ d·ª•: ƒÉn chay, ph√≤ng t·∫ßng cao...)"
                            value={notes}
                            onChange={(e) => setNotes(e.target.value)}
                            rows={3}
                            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500 dark:bg-neutral-700 dark:border-neutral-600 dark:text-white"
                        ></textarea>
                    </div>

                     {/* Ph∆∞∆°ng th·ª©c thanh to√°n (Gi·ªØ nguy√™n n·∫øu b·∫°n c√≥ logic n√†y) */}
                     {/* <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow"> ... </div> */}

                </div>

                {/* C·ªôt ph·∫£i: T√≥m t·∫Øt ƒë∆°n h√†ng */}
                <div className="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow sticky top-24 self-start"> {/* Th√™m sticky */}
                    <h2 className="text-xl font-semibold mb-4 border-b pb-3 dark:text-white">T√≥m T·∫Øt ƒê∆°n H√†ng</h2>
                    <div className="space-y-3 mb-4 max-h-60 overflow-y-auto pr-2">
                        {cartItems.map((item) => {
                             const itemTotal = (item.adults * item.priceAdult) + ((item.children || 0) * item.priceChild) + (item.singleSupplement || 0);
                             return (
                                <div key={item.key} className="flex justify-between items-start text-sm border-b pb-2 last:border-0 dark:border-neutral-700">
                                    <div className="pr-2">
                                        <p className="font-medium text-gray-800 dark:text-white">{item.title}</p>
                                        <p className="text-xs text-gray-500 dark:text-gray-400">
                                            {item.adults} NL, {item.children || 0} TE
                                        </p>
                                    </div>
                                    <span className="font-medium text-gray-900 dark:text-white whitespace-nowrap">
                                        {formatCurrency(itemTotal)}
                                    </span>
                                </div>
                             );
                        })}
                    </div>
                    <div className="border-t pt-4 dark:border-neutral-700">
                        <div className="flex justify-between items-center text-xl font-bold dark:text-white">
                            <span>T·ªïng c·ªông:</span>
                            <span className="text-red-600">{formatCurrency(total)}</span>
                        </div>
                    </div>

                    {/* ƒêi·ªÅu kho·∫£n */}
                    <div className="mt-6">
                        <label className="flex items-center text-sm">
                            <input type="checkbox" checked={agreedToTerms} onChange={(e) => setAgreedToTerms(e.target.checked)} className="w-4 h-4 mr-2 accent-sky-600"/>
                            <span className="text-gray-600 dark:text-gray-300">T√¥i ƒë·ªìng √Ω v·ªõi <a href="#" className="text-sky-600 underline">ƒêi·ªÅu kho·∫£n & Ch√≠nh s√°ch</a>.</span>
                        </label>
                    </div>

                    {/* Th√¥ng b√°o l·ªói */}
                     {error && (
                         <p className="text-sm text-red-600 mt-4">{error}</p>
                     )}

                    {/* N√∫t ƒê·∫∑t h√†ng */}
                    <button
                        type="submit"
                        disabled={isSubmitting || loadingUser || (!currentUser && !loadingUser) } // Disable n·∫øu ƒëang load user ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p
                        className="w-full mt-6 bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg shadow-lg flex items-center justify-center gap-3 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        {isSubmitting ? (
                            <FaSpinner className="animate-spin" />
                        ) : (
                            <FaCreditCard />
                        )}
                        <span>
                            {isSubmitting ? "ƒêang x·ª≠ l√Ω..." : "Ho√†n T·∫•t ƒê·∫∑t Tour"}
                        </span>
                    </button>
                </div>
             </form>
            )}
        </div>
     </div>
    );
}